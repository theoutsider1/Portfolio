import * as THREE from 'three'
import { RefObject, useEffect, useRef } from 'react'
import { useGLTF, useVideoTexture } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { GroupProps } from '@react-three/fiber';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ProjectsInfos } from '../constants/Globals/types';
// Define the GLTFResult type for the loaded model
interface GLTFResult extends GLTF {
    nodes: {
      Cube008: THREE.Mesh;
      Cube008_1: THREE.Mesh;
      Cube008_2: THREE.Mesh;
      keyboard: THREE.Mesh;
      Cube002: THREE.Mesh;
      Cube002_1: THREE.Mesh;
      touchbar: THREE.Mesh;
      monitor_screen: THREE.Mesh
    };
    materials: {
      aluminium: THREE.Material;
      'matte.001': THREE.Material;
      keys: THREE.Material;
      trackpad: THREE.Material;
      touchbar: THREE.Material;
    };
  }

  interface LaptopProps extends GroupProps {
    currentProject : ProjectsInfos;
    sectionRef: RefObject<HTMLDivElement> ;
    isMobile : boolean;
  }
  gsap.registerPlugin(ScrollTrigger)

function Laptop({currentProject,sectionRef, isMobile, ...props}: LaptopProps)  {
  const group = useRef<THREE.Group | null>(null);
  const groupScreenRef = useRef<THREE.Group | null>(null);
  const vd= useVideoTexture(currentProject.projectDirection)
  // Load model
  const { nodes, materials } = useGLTF('/models/mac-draco.glb') as GLTFResult
  //Open Laptop Animation
  const anim = () => {
    if (groupScreenRef.current) {
      // Open Laptop
      gsap.to(groupScreenRef.current.position, {
        x: 0,
        y: 1.16,
        z: 4.2,
        duration: 2,
      });
      gsap.to(groupScreenRef.current.rotation, {
        x: Math.PI / 2,
        y: 0,
        z: 0,
        duration: 2,
        onComplete: () => {
          if (vd?.image instanceof HTMLVideoElement) {
            vd.image.currentTime = 0; // Restart the video
            vd.image.play(); // Play video
          }
        },
      });
    }
  }
  
useEffect(()=>{
  
    if (sectionRef.current) {
    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: sectionRef.current,
        start: 'top center',
        onEnter: anim, 
    }})
     // Force ScrollTrigger refresh to ensure smooth re-attachment of ScrollTrigger
     ScrollTrigger.refresh();
    return () => {
      console.log('Cleaning up timeline...');
      tl.kill()
    }
      
  }
  },[currentProject, vd])
  const laptopScale = isMobile ? 1.2 : 1;
  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  return (
    <group ref={group} {...props} dispose={null} scale={laptopScale} rotation={[-0.2,Math.PI,0]} position={[0,-1,isMobile ? -1 : 0]}>
      <group rotation-x={-0.425} position={[0, -0.04, -4.41]}>
        <group ref={groupScreenRef} position={[0, -1.86, 7.2]} rotation={[Math.PI , 0, 0]}>
          <mesh material={materials.aluminium} geometry={nodes['Cube008'].geometry} />
          <mesh material={materials['matte.001']} geometry={nodes['Cube008_1'].geometry} />
          <mesh 
              geometry={nodes['Cube008_2'].geometry}
              position={[0, 0, 0]}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={[8.27, 6.1, 1]}
              >
           
              <planeGeometry args={[1,1]}/>
              <meshBasicMaterial map={vd}/>
          </mesh>
        </group>
      </group>
      <mesh material={materials.keys} geometry={nodes.keyboard.geometry} position={[1.79, 0, 3.45]} />
      <group position={[0, -0.1, 3.39]}>
        <mesh material={materials.aluminium} geometry={nodes['Cube002'].geometry} />
        <mesh material={materials.trackpad} geometry={nodes['Cube002_1'].geometry} />
      </group>
      <mesh material={materials.touchbar} geometry={nodes.touchbar.geometry} position={[0, -0.03, 1.2]} />
    </group>
  )
}

export default Laptop;